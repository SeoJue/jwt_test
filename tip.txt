CIA: 통신에서 보안유지를 위해 지켜야 하는 특성 
      기밀성, 무결성, 가용성 <- 암호화와 인증을 통해 보장


RSA: CIA를 보장하는 통신을 위해 사용하는 기법 (암호화, 인증 방식)
       2개의 키로 암호화와 인증을 구현


RFC: 원할한 네트워크 통신을 위해 약속된 프로토콜을 기록한 문서
      JWT는 RFC 7519번을 통해 기록됨


JWT(JSON Web Token): 데이터를 JSON 객체로 전송하기 위한 독립적인 방식을 정의하는 개방형 표준 
		      RSA를 통한 디지털 서명이 되어 있어 확인하고 신뢰 가능
		      헤더 - 페이로드 - 시그니쳐(서명) 구조 (각각은 Base64 기반으로 인코딩됨)
		      헤더: 시그니쳐 생서에 사용된 해시 알고리즘을 포함한 메타 데이터 
		      페이로드: 여러 클레임을 포함 (클레임: 페이로드에 저장되는 유저, 토큰 데이터의 조각, 주로 식별 정보)
	                  시그니처: Base64(헤더) + Base64(페이로드) + 시크릿키를 합쳐 암호화 한 것 (HS256, RSA 등)


CORS(Cross-Origin Resource Sharing): 브라우저에서 보안적인 이유로 cross-origin HTTP 요청들을 제한하는 정책 (cross-origin 요청 수행을 위해서는 서버의 동의 필요)
         				요청에 대한 허가, 거절 메커니즘은 HTTP-header를 이용해 구현 가능
				스프링 부트에서는 CORS 정책에 대한 허가를 위해 CORS Filter를 사용 가능


origin: 프로토콜과 호스트, 포트를 합친 것 
cross-origin: 프로토콜(http or https) 도메인 포트번호 중 하나라도 다른 서버


쿠키 기본 정책: 동일 도메인 정책 -> 쿠키는 쿠키가 생성된 도메인에서만 유효하며, 다른 도메인에서는 해당 쿠키값을 사용할 수 없음 -> 브라우저로 접근하는 것이 아니라면 쿠키 사용이 불가능 -> 세션 사용이 불가능하다는 뜻

http Basic: 서버 인증을 위해 리퀘스트 Authorization 헤더에 id와 password를 전달하는 방식 (쿠키를 사용하지 않음)
	  암호화가 되지 않아 보안적 문제가 있을 수 있음 (https를 통해 보안 강화 가능) 

http Bearer: 서버 인증을 위해 Authorization 헤더에 특정 token (jwt 등)을 전달하는 방식 
	    Basic과 달리 token을 전달하기 때문에 token이 노출이 되더라도 상대적으로 보안적 부담이 적음 


필터 실행 순서: 시큐리티 필터 -> 서블릿 필터 -> 스프링 인터셉터 
	        필터를 빨리 적용하고 있다면 시큐리티 필터에 addFilterBefore() 기능을 사용 
